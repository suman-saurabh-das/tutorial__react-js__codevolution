Files Created / Modified for Tutorials

REACT JS - HOOKS 

-------------------------------------- SECTION 01 --------------------------------------------------

[01] Hooks introduction

[02] useState Hook

	• ClassCounter.js - created a class component.
		○ (class based counter component)
	• HookCounter.js - created a functional component.
		○ (functional counter component)
	• App.js - modified to import and render ClasCounter.js & HookCounter.js

[03] useState with Previous state

	• HookCounter2.js - created a functional component.
		○ (implemented counter which updates new value based on the previous value)
	• ClassCounter2.js - created a class component.
		○ (implemented counter which updates new value based on the previous value)
	• App.js - modified to import and render HookCounter2.js

[04] useState with Object

	• HookCounter3.js - created a functional component.
		○ (input first and last name of user as an object and display them)
	• App.js - modified to import and render HookCounter3.js

[05] useState with Array

	• HookCounter4.js - created a functional component.
		○ (adding random numbers to an array and displaying them in a list)
	• App.js - modified to import and render HookCounter4.js

[06] useEffect Hook

[07] useEffect Hook after Render

	• ClassCounter3.js - created a class component.
		○ (counter component with componentDidMount() & componentDidUpdate() methods)
	• HookCounter5.js - created a functional component.
		○ (counter component with useEffect hook to update the document title)
	• App.js - modified to import and render ClassCounter3.js & HookCounter5.js

[08]  useEffect - Conditionally run effects

	• ClassCounter4.js - created a class component.
		○ (conditionally rendering title based on change in state value in componentDidUpdate() method)
	• HookCounter6.js - created a functional component.
		○ (conditionally rendering title based on change in count value using useEffect() hook)
	• App.js - modified to import and render ClassCounter4.js & HookCounter6.js

[09] useEffect - Run effects only once

	• ClassMouse.js - created a class component.
		○ (adding mousemove event listener in componentDidMount() and displaying mouse position)
	• HookMouse.js - created a functional component.
		○ (adding mousemove event listener in useEffect() and displaying mouse position)
	• App.js - modified to import and render ClassMouse.js & HookMouse.js

[10] useEffect - with Clean-up

	• MouseContainer.js - created a functional component.
		○ (container for HookMouse component with toggle button to show/hide HookMouse)
	• ClassMouse.js - modified class component.
		○ (cleaning up of mouse move event listener in componentWillUnmount())
	• HookMouse.js - modified functional component.
		○ (cleaning up of muse move event listener in useEffect() hook)
	• App.js - modified to import and render ClassMouse.js & HookMouse.js

-------------------------------------- SECTION 02 --------------------------------------------------

[11] useEffect - with Incorrect Dependency

	• IntervalClassCounter.js - created a class component.
		○ (class counter using setInterval() method)
	• IntervalHookCounter.js - created a functional component.
		○ (functional counter using setInterval() method)
	• App.js - modified to import and render IntervalClassCounter.js & IntervalHookCounter.js

[12] [13] [14] Fetching data with useEffect

	• DataFetching.js - created a functional component.
		○ (fetching data from json placeholder API and displaying it in a list)
		○ (fetching data from different endpoints based on user input)
		○ (fetching data only when user submits the input value)
	• App.js - modified to import and render DataFetching.js

[15] [16] [17] useContext Hook

	• ComponentC.js - created a functional component.
		○ (Parent component for FunctionalComponentE)
	• ComponentE.js - created a functional component.
		○ (Parent component for FunctionalComponentF)
		○ (Rendering prop data using useContext() hook)
	• ComponentF.js - created a functional component.
		○ (Component receives props directly from DataPassingUsingContext.js via context)
	• DataPassingUsingContext - created a functional component.
		○ (Created UserContext & WorkContext and passed values to child components)
	• App.js - modified to import and render DataPassingUsingContext.js

[18] useReducer Hook

[19] useReducer (simple state & action)
	
	• Counter1.js - created a functional component.
		○ (created a counter whose state was managed via useReducer() hook)
	• App.js - modified to import and render Counter1.js.


Files Created / Modified for Tutorials

REACT JS - BASICS 

-------------------------------------- SECTION 01 --------------------------------------------------

[1] Introduction

[2] Creating a new React app

	• Initialised a new react project - tutorial__react-js__codevolution

[3] React Folder Structure

[4] Components

[5] Functional Component

	• Greet.js - created functional component
		○ (normal function, arrow function, named and default export)
    • App.js - modified to import and render Greet.js

[6] Class Component

	• Welcome.js - created class component
	• App.js - modified to import and render Welcome.js

[7] Hooks

[8] JSX

	• Hello.js - created functional component
		○ (used createElement to create a react component without JSX)
	• App.js - modified to import and render Hello.js

[9] Props

	• GreetProps.js - created functional component
		○ (passed props from App.js to GreetProps.js)
	• WelcomeProps.js - created class component
		○ (used this keyword to get prop values)
	• App.js - modified to pass named props and children props to GreetProps.js
		○ modified to pass named props to WelcomeProps.js

[10] State

	• Message.js - created class component
		○ (created a state variable in the constructor() method of class and updated its value using onClick eventhandler and setState() method)
	• App.js - modified to import and render Message.js

-------------------------------------- SECTION 02 --------------------------------------------------

[11] setState

	• Counter.js - created class component
		○ (created a state variable count in the constructor() method of class, necessity of using  setState() method for rendering components in react, callback() function in setState() method, passing function as an argument to setState() method instead of an object)
	• App.js - modified to import and render Counter.js

[12] Destructuring Props and State

	• GreetPropsDestructuring.js - created functional component
		○ (destructuring of props in function parameter and function body)
	• WelcomePropsDestructuring.js - created class component
		○ (destructuring of props in render method of class component)
	• App.js - modified to pass named props to GreetProps.js
		modified to pass named props to WelcomeProps.js

[13] Event Handling

	• FunctionClick.js - created functional component
		○ (created an onClick() event handler to log in console)
	• ClassClick.js - created class component
		○ (created an onClick() event handler to log in console)
	• App.js - modified to import and render FunctionClick.js & ClassClick.js

[14] Binding event handlers

	• EventBind.js - created class component
		○ (binding event handlers and to be able to use this keyword, 4 methods of binding)
	• App.js - modified to import and render EventBind.js

[15] Methods as Props

	• ParentComponent.js - created class component
		○ (created a state variable and a method to display an alert, passed this method as a prop to ChildComponent.js)
	• ChildComponent.js - created a functional component
		○ (called the method of ParentComponent.js and passed a parameter to it)
	• App.js - modified to import and render ParentComponent.js & ChildComponent.js

[16] Conditional Rendering

	• UserGreeting.js - created class component
		○ (used conditional rendering to render a component based on condition
		○ if/else, element variables, ternary operator, short circuit operator)
	• App.js - modified to import and render UserGreeting.js

[17] List Rendering
	
	• NameList.js - created functional component
		○ (used to render an array of names and an array of objects)
	• Person.js - created functional component
		○ (used to render the data passed from NameList.js as props)
	• App.js - modified to import and render NameList.js

[18] List and Keys

	• NameList.js - modified and renamed functional component
		○ (passed an unique key prop, to remove the error from console)
	• Person.js - modified and renamed functional component
		○ (we get an error if we try to use the key prop in the child component)

[19] Index as Key (Anti-pattern)

	• NameList.js - modified and renamed functional component
		○ (using the code-pen example - https://codepen.io/gopinav/pen/gQpepq
		saw a live demonstration of the problems caused by array index as key and how to avid them)

[20] Styling and CSS basics

	• Stylesheet.js - created functional component
		○ (imported an external style sheet myStyles.css and used it)
		○ (styles based on props and state and adding multiple classes using template literals)
	• myStyles.css - created an external CSS stylesheet
	• InlineStyles.js - created a functional component
		○ (created an object with inline styles and used it to style the component)
	• appStyles.css - external CSS stylesheet to apply red text color
	• appStyles.module.css - external CSS stylesheet to apply green text color
		○ (importing module.css files, and using them to add styles)
	• App.js - modified to import and render Stylesheet.js, InlineStyles.js and use the appStyles.css & appStyles.module.css files

-------------------------------------- SECTION 03 --------------------------------------------------

[21] Basics of form handling

	• Form.js - created class component
		○ (created controlled components, whose value will be stored, displayed and changed based on a state variable and an onChange event handler.)
	• App.js - modified to import and render Form.js

[22] Component Lifecycle Methods

[23] Component Mounting Lifecycle Methods

	• LifecycleA.js - created class component
		○ (order of execution of parent mounting lifecycle methods)
	• LifecycleB.js - created class component
		○ (order of execution of child mounting lifecycle methods)
	• App.js - modified to import and render LifecycleA.js

[24] Component Updating Lifecycle Methods

	• LifecycleC.js - created class component
		○ (order of execution of parent updating lifecycle methods)
	• LifecycleD.js - created class component
		○ (order of execution of child updating lifecycle methods)
	• App.js - modified to import and render LifecycleC.js

[25] Fragments

	• Fragment.js - created functional component
		○ (used JSX fragment to group multiple child components)
	• Table.js - created functional component
		○ (imported Column.js)
	• Column.js - created functional component
		○ (used react fragment to group child components)
	• App.js - modified to import and render Fragment.js & Table.js

[26] Pure Components

	• ParentComp.js - created class component
		○ (imported PureComp.js and RegularComp.js and used a setInterval() method to update a state variable and see the effect in case of a pure component and regular component. If a pure parent component does not re-render, its child components will also not re-render)
	• PureComp.js - created class component
		○ (pure components implement the shouldComponentUpdate method by doing a shallow comparison between prevProps/prevState and currentProps/currentState)
	• RegularComp.js - created class component
		○ (regular components do not implement shouldComponentUpdate method by default)
	• App.js - modified to import and render ParentComp.js

[27] Memo

	• ParentComp.js - modified to import and render MemoComp.js and commented PureComp.js and RegularComp.js also changed the ParentComp.js from pure component to regular component.
	• MemoComp.js - created functional component
		○ (higher order functional component similar to pure component)

